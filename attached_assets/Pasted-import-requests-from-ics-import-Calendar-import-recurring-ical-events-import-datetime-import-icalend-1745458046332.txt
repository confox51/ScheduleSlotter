import requests
from ics import Calendar
import recurring_ical_events
import datetime
import icalendar

def get_free_times_for_date_range(ics_url, start_date_str, end_date_str):
    """
    Retrieves free time slots between 9 am and 5 pm for each date within a range.

    Args:
        ics_url: URL of the ICS calendar file.
        start_date_str: Start date string in YYYY-MM-DD format.
        end_date_str: End date string in YYYY-MM-DD format.

    Returns:
        A dictionary where keys are dates and values are lists of free time slots 
        for that date.
    """

    # Fetch calendar data only once
    response = requests.get(ics_url)
    ical_string = response.content
    calendar = icalendar.Calendar.from_ical(ical_string)

    start_date = datetime.datetime.strptime(start_date_str, "%Y-%m-%d").date()
    end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d").date()

    free_times_by_date = {}  # Store free times for each date

    for current_date in [start_date + datetime.timedelta(days=x) for x in range(0, (end_date-start_date).days + 1)]:
        # add one day to the datetime
        current_date_future = current_date + datetime.timedelta(days=1)

        # Get events for the target date
        events_for_day = [
            event for event in recurring_ical_events.of(calendar).between(current_date, current_date_future)
        ]

        # Define working hours (9 am to 5 pm)
        work_start = datetime.datetime.combine(current_date, datetime.time(9, 0))
        work_end = datetime.datetime.combine(current_date, datetime.time(17, 0))

        # Initialize free time slots with the entire working hours
        free_times = [(work_start, work_end)]

        # Adjust free time slots based on events
        for event in events_for_day:
            event_start = event["DTSTART"].dt.replace(tzinfo=None)  # Remove timezone for comparison
            event_end = event["DTEND"].dt.replace(tzinfo=None)  # Remove timezone for comparison

            updated_free_times = []
            for start, end in free_times:
                if event_start >= end or event_end <= start:
                    # Event outside current free slot, keep the slot
                    updated_free_times.append((start, end))
                else:
                    # Event overlaps current free slot, split the slot
                    if event_start > start:
                        updated_free_times.append((start, event_start))
                    if event_end < end:
                        updated_free_times.append((event_end, end))
            free_times = updated_free_times

        free_times_by_date[current_date] = free_times  # Store free times for current date

    return free_times_by_date

# Example usage:
ics_url = "https://outlook.office365.com/owa/calendar/4ad02a7e9e6f42c78ca2d4315deb9db2@mit.edu/c10ddb3f0fc44257a81eed8e7d7f1a545527055253664937927/calendar.ics"
start_date_str = "2025-04-22"  # Replace with the desired start date
end_date_str = "2025-04-25"  # Replace with the desired end date

free_times_by_date = get_free_times_for_date_range(ics_url, start_date_str, end_date_str)

for date, free_times in free_times_by_date.items():
    print(f"Free times for {date}:")
    for start, end in free_times:
        print(f"  {start.time()} - {end.time()}")